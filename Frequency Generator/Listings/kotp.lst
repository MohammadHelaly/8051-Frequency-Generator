C51 COMPILER V9.60.7.0   KOTP                                                              04/21/2023 21:59:09 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE KOTP
OBJECT MODULE PLACED IN .\Objects\kotp.obj
COMPILER INVOKED BY: C:\Program Files\KEIL\C51\BIN\C51.EXE kotp.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Li
                    -stings\kotp.lst) TABS(2) OBJECT(.\Objects\kotp.obj)

line level    source

   1          // This code takes input from the hex Keypad and outputs a square wave with the freq entered by the user w
             -hile displaying the freq on the quad 7 segment display
   2          // The code works on AT89S51 microcontroller
   3          #include <reg51.h>
   4          
   5          //timer 0 will be used to refresh the display of the quad 7 segment display
   6          //timer 1 will be used to generate the square wave
   7          
   8          // Define the port pins
   9          #define DISPLAY P2
  10          #define DISPLAY_CONTROL P0
  11          
  12          // Define the push button on INT0 which enables the generation of square wave
  13          sbit enableSquareWave = P3^2;
  14          
  15          sbit Tr1 = P0^0;
  16          sbit Tr2 = P0^1;
  17          sbit Tr3 = P0^2;
  18          sbit Tr4 = P0^3;
  19          
  20          // Define the output pin for the square wave
  21          sbit LED = P3^7;
  22          
  23          sbit c3 = P1^7;
  24          sbit c2 = P1^6;
  25          sbit c1 = P1^5;
  26          sbit c0 = P1^4;
  27          
  28          sbit r3 = P1^3;
  29          sbit r2 = P1^2;
  30          sbit r1 = P1^1;
  31          sbit r0 = P1^0;
  32          
  33          // Variable which will be used
  34          unsigned int freq=0;   // the freq of the square wave
  35          unsigned char temp = 1; // the number of times the timer will overflow before the square wave is toggled
  36          unsigned char counter = 1; // the original value of temp
  37          unsigned char pushButton = 0; // the state of the push button
  38          unsigned char Key; // the Key pressed on the Keypad
  39          unsigned char IN[4] = {'0','0','0','0'}; // the IN which will be printed on the quad 7 segment display
  40          unsigned char j=0; // used in iteration
  41          unsigned int delayTime = 0; // the total delay which will be loaded into the timer
  42          unsigned char highVal;
  43          unsigned char lowVal;
  44          unsigned char arr[] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x98}; // the values which will be loa
             -ded into the display to display the IN
  45          
  46          //unsigned char Keypad[4][4] = { '1', '2', '3', 'A',
  47          //                               '4', '5', '6', 'B',
  48           //                              '7', '8', '9', 'C',
  49            //                             '*', '0', '#', 'D' }; // the Keypad
  50          
  51          // Declare the functions
  52          unsigned char KeyPad_Scan();
C51 COMPILER V9.60.7.0   KOTP                                                              04/21/2023 21:59:09 PAGE 2   

  53          void debounce();
  54          void setupTimer(unsigned int delay);
  55          
  56          
  57          // The interrupt service routine for the external interrupt 0 (used to enable the generation of square wav
             -e)
  58          void enableSquareWave_ISR() interrupt 0{
  59   1          //if(pushButton == 0){
  60   1      
  61   1              freq = (IN[0] - '0') + (IN[1] - '0')*10 + (IN[2] - '0')*100 + (IN[3] - '0')*1000;
  62   1              // NOTE: this freq is specified for the 50% duty cycle square wave (duration of only high or low s
             -tate)
  63   1              // We can multiply this freq by 2 to get the freq of the high and low states combined but we won't
             - here
  64   1      
  65   1              delayTime = 1.0 / ( (freq) * 2 * (1.085 * 1e-6) );
  66   1              
  67   1              if(delayTime > 65536){
  68   2                  temp = (delayTime / 65536) + 1;
  69   2                  delayTime = delayTime % 65536;
  70   2              }else{
  71   2                  temp = 1;   
  72   2              }
  73   1              delayTime = 65536 - delayTime;
  74   1      
  75   1              counter = temp;
  76   1              pushButton = 1;
  77   1      
  78   1              setupTimer(delayTime);
  79   1          //}else{
  80   1      
  81   1            //  TR1 = 0;
  82   1             // TF1 = 0;
  83   1             // pushButton = 0;
  84   1             // for(j = 0; j < 4; j++)
  85   1             //     IN[j] = '0';
  86   1              
  87   1          ///}
  88   1          debounce();
  89   1      }
  90          
  91          // The interrupt service routine for the timer 1 overflow (used to generate the square wave)
  92          void timer1_ISR() interrupt 3{
  93   1          //temp--;
  94   1          if(temp == 0){
  95   2              LED = ~LED;
  96   2              temp = counter;
  97   2              setupTimer(delayTime);
  98   2          }else{
  99   2              // Loading the timer 1 with the largest possible delay
 100   2              //setupTimer(0);
 101   2                temp--;
 102   2          }
 103   1      }
 104          
 105          unsigned char position = 0;
 106          void timer0_ISR() interrupt 1{
 107   1      
 108   1        P0 = 1 << position;
 109   1        P2 = arr[IN[position] - '0'];
 110   1        //int digits[4] = {1,1,1,1};
 111   1        //digits[position] = 0;
C51 COMPILER V9.60.7.0   KOTP                                                              04/21/2023 21:59:09 PAGE 3   

 112   1        //Tr1=digits[0];
 113   1        //Tr2=digits[1];
 114   1        //Tr3=digits[2];
 115   1        //Tr4=digits[3];
 116   1        //P2 = arr[IN[position]-'0'];
 117   1        position++;         
 118   1        if (position == 4)
 119   1        {
 120   2        position = 0;
 121   2        }
 122   1          //2 ms
 123   1          TH0 = 0xF8;
 124   1          TL0 = 0xCD;
 125   1          TF0 = 0;
 126   1      } 
 127          
 128          unsigned char KeyPad_Scan(){
 129   1      
 130   1          unsigned char Key;
 131   1          Key ='\0';
 132   1      
 133   1          r0=0;
 134   1          if(c3 ==0) {Key= 'A';}
 135   1          else if(c2==0) {Key= '3';}
 136   1          else if(c1==0) {Key= '2';}
 137   1          else if(c0==0) {Key= '1';}
 138   1          r0=1;
 139   1        
 140   1          r1=0;
 141   1          if(c3 ==0) {Key= 'B';}
 142   1          else if(c2==0) {Key= '6';}
 143   1          else if(c1==0) {Key= '5';}
 144   1          else if(c0==0) {Key= '4';}
 145   1          r1=1;
 146   1      
 147   1          r2=0;
 148   1          if(c3 ==0) {Key= 'C';}
 149   1          else if(c2==0) {Key= '9';}
 150   1          else if(c1==0) {Key= '8';}
 151   1          else if(c0==0) {Key= '7';}
 152   1          r2=1;
 153   1          
 154   1          r3=0;
 155   1          if(c3 ==0) {Key= 'D';}
 156   1          else if(c2==0) {Key= '#';}
 157   1          else if(c1==0) {Key= '0';}
 158   1          else if(c0==0) {Key= '*';}
 159   1          r3=1;
 160   1      
 161   1          if(Key != '\0'){
 162   2              debounce();
 163   2          }
 164   1          return Key;
 165   1      }
 166          
 167          void debounce(){
 168   1          int i;
 169   1          int j;
 170   1          for(i=100;i>0;i--)
 171   1            for(j=1000;j>0;j--)
 172   1              ;   
 173   1      }
C51 COMPILER V9.60.7.0   KOTP                                                              04/21/2023 21:59:09 PAGE 4   

 174          
 175          void setupTimer(unsigned int delay){
 176   1      
 177   1          TR1 = 0; // Stop the timer
 178   1          TF1 = 0; // Clear the timer flag
 179   1      
 180   1          TH1 = delay >> 8; // Load the timer high register
 181   1          TL1 = delay & 0xFF; // Load the timer low register
 182   1      
 183   1          TR1 = 1; // Start the timer    
 184   1      }
 185          
 186          
 187          void main(){
 188   1      
 189   1          P1 = 0xFF;
 190   1          P0 = 0x00;
 191   1          P2 = 0x00;
 192   1          LED = 0;
 193   1          EA = 1; 
 194   1          EX0 = 1; 
 195   1          IT0 = 1;
 196   1          //TMOD = 0x11;
 197   1          TMOD =  (TMOD & 0xF0) | 0x11;
 198   1          ET1 = 1; 
 199   1          ET0 = 1;
 200   1          TH0 = 0xF8;
 201   1          TL0 = 0xCD;
 202   1          TR0 = 1;    
 203   1      
 204   1          while(1)
 205   1          {
 206   2              Key = KeyPad_Scan();
 207   2              if(Key != '\0'){
 208   3                  IN[3] = IN[2];
 209   3                  IN[2] = IN[1];
 210   3                  IN[1] = IN[0];
 211   3                  IN[0] = Key;
 212   3              }
 213   2          }
 214   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    653    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     26       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
